"""
Email notification system for sending sentiment alerts to support teams
"""
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime
from loguru import logger
from typing import List, Dict, Optional
import json
# from jinja2 import Template  # Using simple string formatting instead

class EmailNotifier:
    def __init__(self, config):
        """Initialize email notifier with configuration"""
        self.config = config
        self.smtp_server = config.SMTP_SERVER
        self.smtp_port = config.SMTP_PORT
        self.email_username = config.EMAIL_USERNAME
        self.email_password = config.EMAIL_PASSWORD
        self.alert_email = config.ALERT_EMAIL
        
        # Email templates
        self.templates = {
            'critical_alert': self._get_critical_alert_template(),
            'high_alert': self._get_high_alert_template(),
            'medium_alert': self._get_medium_alert_template(),
            'daily_summary': self._get_daily_summary_template()
        }
    
    def _get_critical_alert_template(self) -> str:
        """Template for critical alerts"""
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .header { background-color: #dc3545; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                .alert-level { font-size: 24px; font-weight: bold; margin: 0; }
                .content { line-height: 1.6; }
                .sentiment-box { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .recommendation-box { background-color: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; }
                .button { display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1 class="alert-level">üö® CRITICAL ALERT</h1>
                    <p>Urgent negative sentiment detected</p>
                </div>
                
                <div class="content">
                    <h2>Alert Details</h2>
                    <p><strong>Time:</strong> {{ timestamp }}</p>
                    <p><strong>Source:</strong> {{ source }}</p>
                    <p><strong>Sentiment Score:</strong> {{ sentiment_score }}</p>
                    <p><strong>Confidence:</strong> {{ confidence }}%</p>
                    
                    <div class="sentiment-box">
                        <h3>Customer Feedback:</h3>
                        <p><em>"{{ text }}"</em></p>
                    </div>
                    
                    {% if source_url %}
                    <p><strong>Source URL:</strong> <a href="{{ source_url }}">{{ source_url }}</a></p>
                    {% endif %}
                    
                    <div class="recommendation-box">
                        <h3>Recommended Response:</h3>
                        <p>{{ response_recommendation }}</p>
                    </div>
                    
                    <h3>Immediate Actions Required:</h3>
                    <ul>
                        <li>Review the customer feedback immediately</li>
                        <li>Contact the customer if possible</li>
                        <li>Escalate to management if necessary</li>
                        <li>Monitor for similar issues</li>
                    </ul>
                    
                    <a href="{{ dashboard_url }}" class="button">View Dashboard</a>
                </div>
                
                <div class="footer">
                    <p>This alert was generated by the Customer Sentiment Alert System.</p>
                    <p>Alert ID: {{ alert_id }}</p>
                </div>
            </div>
        </body>
        </html>
        """
    
    def _get_high_alert_template(self) -> str:
        """Template for high priority alerts"""
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .header { background-color: #fd7e14; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                .alert-level { font-size: 20px; font-weight: bold; margin: 0; }
                .content { line-height: 1.6; }
                .sentiment-box { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .recommendation-box { background-color: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; }
                .button { display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1 class="alert-level">‚ö†Ô∏è HIGH PRIORITY ALERT</h1>
                    <p>Negative sentiment detected</p>
                </div>
                
                <div class="content">
                    <h2>Alert Details</h2>
                    <p><strong>Time:</strong> {{ timestamp }}</p>
                    <p><strong>Source:</strong> {{ source }}</p>
                    <p><strong>Sentiment Score:</strong> {{ sentiment_score }}</p>
                    <p><strong>Confidence:</strong> {{ confidence }}%</p>
                    
                    <div class="sentiment-box">
                        <h3>Customer Feedback:</h3>
                        <p><em>"{{ text }}"</em></p>
                    </div>
                    
                    {% if source_url %}
                    <p><strong>Source URL:</strong> <a href="{{ source_url }}">{{ source_url }}</a></p>
                    {% endif %}
                    
                    <div class="recommendation-box">
                        <h3>Recommended Response:</h3>
                        <p>{{ response_recommendation }}</p>
                    </div>
                    
                    <h3>Suggested Actions:</h3>
                    <ul>
                        <li>Review the customer feedback</li>
                        <li>Consider reaching out to the customer</li>
                        <li>Monitor for escalation</li>
                    </ul>
                    
                    <a href="{{ dashboard_url }}" class="button">View Dashboard</a>
                </div>
                
                <div class="footer">
                    <p>This alert was generated by the Customer Sentiment Alert System.</p>
                    <p>Alert ID: {{ alert_id }}</p>
                </div>
            </div>
        </body>
        </html>
        """
    
    def _get_medium_alert_template(self) -> str:
        """Template for medium priority alerts"""
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .header { background-color: #ffc107; color: black; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                .alert-level { font-size: 18px; font-weight: bold; margin: 0; }
                .content { line-height: 1.6; }
                .sentiment-box { background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .recommendation-box { background-color: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; }
                .button { display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1 class="alert-level">üì¢ MEDIUM PRIORITY ALERT</h1>
                    <p>Negative sentiment detected</p>
                </div>
                
                <div class="content">
                    <h2>Alert Details</h2>
                    <p><strong>Time:</strong> {{ timestamp }}</p>
                    <p><strong>Source:</strong> {{ source }}</p>
                    <p><strong>Sentiment Score:</strong> {{ sentiment_score }}</p>
                    <p><strong>Confidence:</strong> {{ confidence }}%</p>
                    
                    <div class="sentiment-box">
                        <h3>Customer Feedback:</h3>
                        <p><em>"{{ text }}"</em></p>
                    </div>
                    
                    {% if source_url %}
                    <p><strong>Source URL:</strong> <a href="{{ source_url }}">{{ source_url }}</a></p>
                    {% endif %}
                    
                    <div class="recommendation-box">
                        <h3>Recommended Response:</h3>
                        <p>{{ response_recommendation }}</p>
                    </div>
                    
                    <a href="{{ dashboard_url }}" class="button">View Dashboard</a>
                </div>
                
                <div class="footer">
                    <p>This alert was generated by the Customer Sentiment Alert System.</p>
                    <p>Alert ID: {{ alert_id }}</p>
                </div>
            </div>
        </body>
        </html>
        """
    
    def _get_daily_summary_template(self) -> str:
        """Template for daily summary emails"""
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .header { background-color: #007bff; color: white; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                .content { line-height: 1.6; }
                .stats-box { background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #666; }
                .button { display: inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üìä Daily Sentiment Summary</h1>
                    <p>{{ date }}</p>
                </div>
                
                <div class="content">
                    <div class="stats-box">
                        <h3>Today's Statistics</h3>
                        <p><strong>Total Mentions:</strong> {{ total_mentions }}</p>
                        <p><strong>Negative Mentions:</strong> {{ negative_mentions }}</p>
                        <p><strong>Alerts Generated:</strong> {{ total_alerts }}</p>
                        <p><strong>Critical Alerts:</strong> {{ critical_alerts }}</p>
                        <p><strong>High Priority Alerts:</strong> {{ high_alerts }}</p>
                    </div>
                    
                    <h3>Top Sources</h3>
                    <ul>
                        {% for source in top_sources %}
                        <li>{{ source.name }}: {{ source.count }} mentions</li>
                        {% endfor %}
                    </ul>
                    
                    <h3>Recent Critical Issues</h3>
                    {% if recent_critical %}
                        {% for alert in recent_critical %}
                        <div style="border-left: 4px solid #dc3545; padding-left: 15px; margin: 10px 0;">
                            <p><strong>{{ alert.source }}</strong> - {{ alert.timestamp }}</p>
                            <p><em>"{{ alert.text[:100] }}{% if alert.text|length > 100 %}...{% endif %}"</em></p>
                        </div>
                        {% endfor %}
                    {% else %}
                        <p>No critical issues today. Great job! üéâ</p>
                    {% endif %}
                    
                    <a href="{{ dashboard_url }}" class="button">View Full Dashboard</a>
                </div>
                
                <div class="footer">
                    <p>This summary was generated by the Customer Sentiment Alert System.</p>
                </div>
            </div>
        </body>
        </html>
        """
    
    def generate_response_recommendation(self, sentiment_data: Dict) -> str:
        """Generate response recommendations based on sentiment analysis"""
        sentiment_score = sentiment_data.get('sentiment_score', 0)
        text = sentiment_data.get('text', '').lower()
        source = sentiment_data.get('source', '').lower()
        
        recommendations = []
        
        # General recommendations based on sentiment score
        if sentiment_score < -0.7:
            recommendations.append("This is a highly negative sentiment requiring immediate attention.")
            recommendations.append("Consider reaching out directly to the customer to resolve their concerns.")
            recommendations.append("Review your processes to prevent similar issues.")
        elif sentiment_score < -0.4:
            recommendations.append("This negative sentiment should be addressed promptly.")
            recommendations.append("Consider offering a solution or explanation to the customer.")
        else:
            recommendations.append("Monitor this sentiment for potential escalation.")
        
        # Source-specific recommendations
        if 'twitter' in source:
            recommendations.append("Consider responding publicly on Twitter to show you're listening.")
            recommendations.append("Keep the response concise and professional.")
        elif 'reddit' in source:
            recommendations.append("Reddit users appreciate honest, transparent responses.")
            recommendations.append("Consider providing detailed explanations or solutions.")
        elif 'trustpilot' in source or 'yelp' in source:
            recommendations.append("Respond professionally to show other potential customers you care.")
            recommendations.append("Offer to take the conversation offline if needed.")
        
        # Content-specific recommendations
        if any(word in text for word in ['refund', 'money', 'payment']):
            recommendations.append("Consider offering a refund or compensation if appropriate.")
        if any(word in text for word in ['service', 'support', 'help']):
            recommendations.append("Review your customer service processes and training.")
        if any(word in text for word in ['product', 'quality', 'broken']):
            recommendations.append("Investigate potential product quality issues.")
        if any(word in text for word in ['delivery', 'shipping', 'late']):
            recommendations.append("Review your logistics and delivery processes.")
        
        return " ".join(recommendations)
    
    def send_alert_email(self, alert_data: Dict, sentiment_data: Dict) -> bool:
        """Send alert email for negative sentiment"""
        try:
            urgency_level = alert_data.get('urgency_level', 'medium')
            template_name = f"{urgency_level}_alert"
            
            if template_name not in self.templates:
                template_name = 'medium_alert'
            
            # Simple template rendering without jinja2
            template = self.templates[template_name]
            
            # Prepare template data
            timestamp = sentiment_data.get('timestamp', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
            source = sentiment_data.get('source', 'Unknown')
            sentiment_score = sentiment_data.get('sentiment_score', 0)
            confidence = round(sentiment_data.get('confidence', 0) * 100, 1)
            text = sentiment_data.get('text', '')
            source_url = sentiment_data.get('url', '')
            response_recommendation = alert_data.get('response_recommendation', '')
            alert_id = alert_data.get('id')
            dashboard_url = 'http://localhost:5000'
            
            # Render email content using simple string formatting
            # Replace template variables manually
            html_content = template
            html_content = html_content.replace('{{ alert_id }}', str(alert_id))
            html_content = html_content.replace('{{ timestamp }}', str(timestamp))
            html_content = html_content.replace('{{ source }}', str(source))
            html_content = html_content.replace('{{ sentiment_score }}', str(sentiment_score))
            html_content = html_content.replace('{{ confidence }}', str(confidence))
            html_content = html_content.replace('{{ text }}', str(text))
            html_content = html_content.replace('{{ source_url }}', str(source_url))
            html_content = html_content.replace('{{ response_recommendation }}', str(response_recommendation))
            html_content = html_content.replace('{{ dashboard_url }}', str(dashboard_url))
            # Remove any remaining template syntax
            html_content = html_content.replace('{% if source_url %}', '')
            html_content = html_content.replace('{% endif %}', '')
            
            # Create email message
            message = MIMEMultipart("alternative")
            message["Subject"] = f"üö® {urgency_level.upper()} ALERT: Negative Sentiment Detected"
            message["From"] = self.email_username
            message["To"] = self.alert_email
            
            # Add HTML content
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Send email
            success = self._send_email(message)
            
            if success:
                logger.info(f"Alert email sent successfully for alert {alert_data.get('id')}")
            else:
                logger.error(f"Failed to send alert email for alert {alert_data.get('id')}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending alert email: {e}")
            return False
    
    def send_daily_summary(self, summary_data: Dict) -> bool:
        """Send daily summary email"""
        try:
            # Simple template rendering without jinja2
            template = self.templates['daily_summary']
            
            # Prepare template data
            date = datetime.now().strftime('%Y-%m-%d')
            total_mentions = summary_data.get('total_mentions', 0)
            negative_mentions = summary_data.get('negative_mentions', 0)
            total_alerts = summary_data.get('total_alerts', 0)
            critical_alerts = summary_data.get('critical_alerts', 0)
            high_alerts = summary_data.get('high_alerts', 0)
            top_sources = summary_data.get('top_sources', [])
            recent_critical = summary_data.get('recent_critical', [])
            dashboard_url = 'http://localhost:5000'
            
            # Create top sources HTML
            top_sources_html = ""
            for source in top_sources[:5]:
                top_sources_html += f"<li>{source.get('name', 'Unknown')}: {source.get('count', 0)} mentions</li>"
            
            # Create recent critical HTML
            recent_critical_html = ""
            if recent_critical:
                for alert in recent_critical[:3]:
                    text = alert.get('text', '')[:100]
                    if len(alert.get('text', '')) > 100:
                        text += "..."
                    recent_critical_html += f"""
                    <div style="border-left: 4px solid #dc3545; padding-left: 15px; margin: 10px 0;">
                        <p><strong>{alert.get('source', 'Unknown')}</strong> - {alert.get('timestamp', 'Unknown')}</p>
                        <p><em>"{text}"</em></p>
                    </div>
                    """
            else:
                recent_critical_html = "<p>No critical issues today. Great job! üéâ</p>"
            
            # Render email content using simple string formatting
            html_content = template.format(
                date=date,
                total_mentions=total_mentions,
                negative_mentions=negative_mentions,
                total_alerts=total_alerts,
                critical_alerts=critical_alerts,
                high_alerts=high_alerts,
                top_sources=top_sources_html,
                recent_critical=recent_critical_html,
                dashboard_url=dashboard_url
            )
            
            # Create email message
            message = MIMEMultipart("alternative")
            message["Subject"] = f"Daily Sentiment Summary - {date}"
            message["From"] = self.email_username
            message["To"] = self.alert_email
            
            # Add HTML content
            html_part = MIMEText(html_content, "html")
            message.attach(html_part)
            
            # Send email
            success = self._send_email(message)
            
            if success:
                logger.info("Daily summary email sent successfully")
            else:
                logger.error("Failed to send daily summary email")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending daily summary email: {e}")
            return False
    
    def _send_email(self, message: MIMEMultipart) -> bool:
        """Send email using SMTP"""
        try:
            if not all([self.smtp_server, self.email_username, self.email_password]):
                logger.error("Email configuration incomplete")
                return False
            
            # Create secure connection
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.email_username, self.email_password)
                server.send_message(message)
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending email: {e}")
            return False
    
    def test_email_connection(self) -> bool:
        """Test email connection and configuration"""
        try:
            if not all([self.smtp_server, self.email_username, self.email_password]):
                logger.error("Email configuration incomplete")
                return False
            
            context = ssl.create_default_context()
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls(context=context)
                server.login(self.email_username, self.email_password)
            
            logger.info("Email connection test successful")
            return True
            
        except Exception as e:
            logger.error(f"Email connection test failed: {e}")
            return False
